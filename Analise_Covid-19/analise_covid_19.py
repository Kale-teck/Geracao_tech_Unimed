# -*- coding: utf-8 -*-
"""Analise_Covid-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U06LV3AiQTl2lmJDIFcjLtKfjnh5dpXd

# Projeto COVID-19

## Digital Innovation One
"""

import pandas as pd
import numpy as np
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go

# vamos importar os dados para o projeto
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/aula01/projeto_eda_covid-master/covid_19_data.csv')

df.head()

# conferir os tipos de cada coluna
df.dtypes

df['ObservationDate'] = pd.to_datetime(df['ObservationDate']) #define as colunas que armazenam datas como datetime64
df['Last Update'] = pd.to_datetime(df['Last Update']) #define as colunas que armazenam datas como datetime64

"""Nomes de colunas não devem conter maiúsculas  e nem carcteres especiais"""

import re #importa módulo para edição das strings

def corrige_colunas(col_name):
  return re.sub(r"[/|]", "", col_name).lower() #elimina /| e espaços em branco de col_name

corrige_colunas("AHAYT/lkjd") # teste da função

df.columns

df.columns = [corrige_colunas(col) for col in df.columns] #corrige o nomes de todas as colunas de uma vez

df.head(10)

"""# Iremos analisar apenas os dados do Brasil"""

df.loc[df.countryregion == 'Brazil']

brasil = df.loc[ #chama o método loc[]
    (df.countryregion == 'Brazil') & #região Brasil
    (df.confirmed > 0) #confirmados acima de zero
]

brasil #chama o objeto criado na célula anterior

"""# Analizando casos confirmados"""

px.line(brasil, 'observationdate', 'confirmed', title=' Brasil')
#chama a biblioteca Plotly.express
#passa brasil(dataframe), 'coluna1', 'coluna2', title='Título do Gráfico'

"""# predição"""

from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt

confirmados = brasil.confirmed
confirmados.index = brasil.observationdate
confirmados

res = seasonal_decompose(confirmados)

fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(10, 8)) #cria 4 gráficos em uma figura só
#g´rafico um
ax1.plot(res.observed)
ax2.plot(res.trend)
ax3.plot(res.seasonal)
ax4.plot(confirmados.index, res.resid) #gráfico de ruído
ax4.axhline(0, linestyle='dashed', c='black')
plt.show()

